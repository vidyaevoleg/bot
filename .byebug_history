continue
summary
exit
reload!
*args
args
exit
continue
summary.rate
summary.volume
continue
gon.sessions.first.dig(:orders)
gon.sessions.first.keys
gon.sessions.first
gon.sessions
exit
sessions.first.orders
sessions.first
exit-program
attrs
exit-program
attrs
exit-program
continue
exit
sign
price
exit
next
continue
answer['success']
params
answer = JSON.parse(result.body)
answer
next
exit
reload!
Account::Template.last.update(min_buy_percent_diff: 1.5)
Account::Template.last.min_buy_percent_diff.to_f
Account::Template.last
last_candle.ask.to_f
avg.to_f
avg = other_candles.map(&:ask).inject(&:+) / other_candles.size
other_candles.map(&:max)
last_candle.ask.to_f
other_candles.map(&:max).max.to_f
other_candles.map(&:max).max
exit
Candle.last.bid.to_f
Candle.last.ask.to_f
Candle.last
Account::Template.last.account.
Account::Template.last.provider
Account::Template.last
0.06546111 / 0.06475969
(1 + min_percent).to_f
1 + min_percent
0.06546111 - 0.06475969
(summary.bid.to_d + STH.to_d).to_f
(summary.bid.to_d + STH.to_d)
(summary.ask.to_d - STH.to_d).to_f
min_percent.to_f
exit
Strategy.const_get(strategy_klass).new
Strategy.const_get(strategy_klass)
strategy_klass = strategy.capitalize
